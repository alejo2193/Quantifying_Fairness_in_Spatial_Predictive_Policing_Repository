# Main code

- Could think about how best to produce a "prediction" from an SEPP method:
  - Say we want predict the next week.  Is a "point" estimate appropriate, or should we somehow "integrate" over time??
  - After a bit of thought, this seems complicated (even e.g. for a time-only Hawkes process).  Which is
     perhaps why other authors haven't addressed it.

- Start work on network based framework.
  - Have the base code working fairly well, though it needs polishing


# GUI

- Awaiting input from colleagues on "evaluation" techniques before I do too much work which
  might not be useful.

- Network support.  Need to same "pipeline" as for grid predictions:
  - A "network hotspot" prediction method needs making
  - And behind-the-scene support in "predictors.py"
  - Use the crop to geometry to adjust the network
  - Think carefully about re-using cached data (shouldn't spawn lots of "predictor" classes, but just re-use one)
  - Visualisation code of the prediction
  - (Eventually) convert a grid prediction to a network prediction for comparison purposes


- Base map support:
  - Start integrating `tilemapbase` and add configuration options


- On work LINUX machine, I am now seeing a separate "Toplevel" window.  Can I replicate on Ubunutu??




## Very low priority

- See comments in `run_comparison.py` about memory usage


# Parked ideas

## Clipping the input network

I had originally planned to reuse the `geo-clip` code to allow loading a shape file to clip the network to.

- But on thinking again, perhaps the _same_ clipping should be done to the network and the grid
- Also loading and previewing networks is _extremely_ slow, and so it seems more sensible to ask
  the user to prepare network geometry externally.
